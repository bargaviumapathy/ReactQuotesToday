{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["headerStyle","fontFamily","fontStyle","textAlign","App","state","quote","author","bgColor","canShare","bgColors","handleChangeBackground","color","_this","Math","floor","random","setState","handleNewQuote","getQuote","getAnchorClass","console","log","Object","assertThisInitialized","axios","get","then","response","data","contents","quotes","catch","error","react_default","a","createElement","className","style","background","this","id","onClick","href","target","role","float","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAKMA,EAAc,CAClBC,WAAY,WACZC,UAAW,SACXC,UAAW,UAqGEC,6MA/FbC,MAAQ,CACNC,MAAO,GACPC,OAAQ,GACRC,QAAS,aACTC,UAAU,KAGZC,SAAW,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aA0CFC,uBAAyB,SAAAD,GACvB,IAAIE,EAAQC,EAAKH,SAASI,KAAKC,MAAsB,GAAhBD,KAAKE,WAC1CH,EAAKI,SAAS,CAAET,QAASI,OAG3BM,eAAiB,WACfL,EAAKM,WACLN,EAAKF,4BAGPS,eAAiB,WAMf,OAJiBP,EAAKR,MAAMI,SACxB,qCACA,iDAKNU,SAAW,WACTE,QAAQC,IAARC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAV,KACAY,IACGC,IAAI,2BACJC,KAAK,SAAAC,GACJP,QAAQC,IAARC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAV,KACAA,EAAKI,SAAS,CACZX,MAAOsB,EAASC,KAAKC,SAASC,OAAO,GAAGzB,MACxCC,OAAQqB,EAASC,KAAKC,SAASC,OAAO,GAAGxB,OACzCE,UAAU,MAGbuB,MAAM,SAASC,GACdZ,QAAQC,IAAIW,8EAtEhB,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,6CACVC,MAAO,CAAEC,WAAYC,KAAKnC,MAAMG,UAEhC0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAOtC,GAAX,6BACAkC,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACnBH,EAAAC,EAAAC,cAAA,UACEC,UAAU,+BACVI,GAAG,WACHC,QAASF,KAAKtB,gBAHhB,aAOAgB,EAAAC,EAAAC,cAAA,KACEK,GAAG,UACHJ,UAAWG,KAAKpB,iBAChBuB,KA1CK,oCA0CcH,KAAKnC,MAAMC,MAAQ,IAAMkC,KAAKnC,MAAME,OACvDqC,OAAO,SACPC,KAAK,UAELX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAPf,oBAUAH,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBAAnB,KACAH,EAAAC,EAAAC,cAAA,OAAKK,GAAG,WAAWJ,UAAU,mCAC3BH,EAAAC,EAAAC,cAAA,YAAOI,KAAKnC,MAAMC,OAClB4B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEQ,MAAO,UAAtB,IAAmCN,KAAKnC,MAAME,OAA9C,gBAnDIwC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.a30db5e7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst headerStyle = {\n  fontFamily: \"Pacifico\",\n  fontStyle: \"italic\",\n  textAlign: \"center\"\n};\n\nconst twitterUrl = \"https://twitter.com/home/?status=\";\n\nclass App extends Component {\n  state = {\n    quote: \"\",\n    author: \"\",\n    bgColor: \"lightgreen\",\n    canShare: false\n  };\n\n  bgColors = [\n    \"#f08080\",\n    \"#eea2ad\",\n    \"#ffa07a\",\n    \"#b0e2ff\",\n    \"#809dc4\",\n    \"#b0e0e6\",\n    \"#bada55\",\n    \"#a9a9a9\",\n    \"#e3a857\"\n  ];\n\n  render() {\n    return (\n      <div\n        className=\"container-fluid text-center app-background\"\n        style={{ background: this.state.bgColor }}\n      >\n        <div className=\"row\">\n          <div className=\"col  title-div\">\n            <h1 style={headerStyle}> Random Quotes For You ! </h1>\n            <section className=\"section-spacing\" />\n            <button\n              className=\"btn btn-dark btn-lg btn-text\"\n              id=\"newquote\"\n              onClick={this.handleNewQuote}\n            >\n              New Quote\n            </button>\n            <a\n              id=\"twitter\"\n              className={this.getAnchorClass()}\n              href={twitterUrl + this.state.quote + \"-\" + this.state.author}\n              target=\"_blank\"\n              role=\"button\"\n            >\n              <i className=\"fa fa-twitter \" />\n              Share on Twitter\n            </a>\n            <section className=\"section-spacing\"> </section>\n            <div id=\"quotebox\" className=\"text-justify quote-box btn-text\">\n              <span>{this.state.quote}</span>\n              <br />\n              <span style={{ float: \"right\" }}>-{this.state.author} </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  handleChangeBackground = bgColors => {\n    let color = this.bgColors[Math.floor(Math.random() * 10)];\n    this.setState({ bgColor: color });\n  };\n\n  handleNewQuote = () => {\n    this.getQuote();\n    this.handleChangeBackground();\n  };\n\n  getAnchorClass = () => {\n    let classForAnchor = \"\";\n    classForAnchor = this.state.canShare\n      ? \"btn btn-dark btn-lg btn-text-share\"\n      : \"btn btn-dark btn-lg btn-text-share disabled\";\n\n    return classForAnchor;\n  };\n\n  getQuote = () => {\n    console.log(this);\n    axios\n      .get(\"https://quotes.rest/qod\")\n      .then(response => {\n        console.log(this);\n        this.setState({\n          quote: response.data.contents.quotes[0].quote,\n          author: response.data.contents.quotes[0].author,\n          canShare: true\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}